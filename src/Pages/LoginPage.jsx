import React, { useState } from 'react';
import { authService } from '../Services/AuthServices';
import "../assets/styles/LoginPage.css";
import "../assets/styles/Common.css";

function LoginPage({ onLogin }) {
  const [mode, setMode] = useState('login'); // 'login', 'register', 'forgot'
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [email, setEmail] = useState('');
  const [fullName, setFullName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const response = await authService.login({ username, password });
      
      // G·ªçi callback onLogin v·ªõi user data
      onLogin({ 
        username: response.user?.username || username,
        ...response.user 
      });
      
      // Success message (optional)
      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', response);
    } catch (err) {
      console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', err);
      setError(err.message || 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!');
    } finally {
      setLoading(false);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setError('');

    // Validate tr∆∞·ªõc khi g·ª≠i
    if (password !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
      return;
    }
    
    if (password.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!');
      return;
    }

    setLoading(true);

    try {
      await authService.register({
        username,
        password,
        email,
        fullName
      });
      
      alert('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
      setMode('login');
      resetForm();
    } catch (err) {
      console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', err);
      setError(err.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setLoading(false);
    }
  };

  const handleForgotPassword = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      // TODO: Implement forgot password API endpoint
      // await authService.forgotPassword({ email });
      
      alert(`Link kh√¥i ph·ª•c m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${email}.\nVui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n.`);
      setMode('login');
      resetForm();
    } catch (err) {
      console.error('‚ùå L·ªói kh√¥i ph·ª•c m·∫≠t kh·∫©u:', err);
      setError(err.message || 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setUsername('');
    setPassword('');
    setConfirmPassword('');
    setEmail('');
    setFullName('');
    setError('');
  };

  const switchMode = (newMode) => {
    setMode(newMode);
    resetForm();
  };

  return (
    <div className="login-container">
      <div className="login-left">
        <div className="login-branding">
          <div className="login-logo">üè¢</div>
          <h1>Kho H√†ng</h1>
          <p>H·ªá th·ªëng qu·∫£n l√Ω kho h√†ng<br />chuy√™n nghi·ªáp v√† hi·ªán ƒë·∫°i</p>
        </div>
      </div>

      <div className="login-right">
        <div className="login-box">
          {/* Error Alert */}
          {error && (
            <div className="alert alert-error" style={{
              backgroundColor: '#fee2e2',
              border: '1px solid #ef4444',
              color: '#991b1b',
              padding: '12px 16px',
              borderRadius: '8px',
              marginBottom: '20px',
              fontSize: '14px'
            }}>
              ‚ö†Ô∏è {error}
            </div>
          )}

          {/* LOGIN FORM */}
          {mode === 'login' && (
            <>
              <div className="login-header">
                <h2>ƒêƒÉng nh·∫≠p</h2>
                <p>Ch√†o m·ª´ng tr·ªü l·∫°i! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c</p>
              </div>

              <form onSubmit={handleLogin}>
                <div className="form-group">
                  <label className="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
                  <input
                    type="text"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">M·∫≠t kh·∫©u</label>
                  <input
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="forgot-password-link">
                  <a href="#" onClick={(e) => { e.preventDefault(); switchMode('forgot'); }}>
                    Qu√™n m·∫≠t kh·∫©u?
                  </a>
                </div>

                <button 
                  type="submit" 
                  className="btn-login"
                  disabled={loading}
                  style={{ opacity: loading ? 0.6 : 1 }}
                >
                  {loading ? '‚è≥ ƒêang ƒëƒÉng nh·∫≠p...' : 'ƒêƒÉng nh·∫≠p'}
                </button>
              </form>

              <div className="switch-auth-mode">
                <p>Ch∆∞a c√≥ t√†i kho·∫£n? <a href="#" onClick={(e) => { e.preventDefault(); switchMode('register'); }}>ƒêƒÉng k√Ω ngay</a></p>
              </div>

              <div className="demo-credentials">
                <p><strong>T√†i kho·∫£n demo:</strong></p>
                <p>Username: <code>admin</code></p>
                <p>Password: <code>admin123</code></p>
              </div>
            </>
          )}

          {/* REGISTER FORM */}
          {mode === 'register' && (
            <>
              <div className="login-header">
                <h2>ƒêƒÉng k√Ω t√†i kho·∫£n</h2>
                <p>T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng</p>
              </div>

              <form onSubmit={handleRegister}>
                <div className="form-group">
                  <label className="form-label">H·ªç v√† t√™n</label>
                  <input
                    type="text"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">Email</label>
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p email"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
                  <input
                    type="text"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">M·∫≠t kh·∫©u</label>
                  <input
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                    required
                    disabled={loading}
                  />
                </div>

                <div className="form-group">
                  <label className="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <input
                    type="password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                    required
                    disabled={loading}
                  />
                </div>

                <button 
                  type="submit" 
                  className="btn-login"
                  disabled={loading}
                  style={{ opacity: loading ? 0.6 : 1 }}
                >
                  {loading ? '‚è≥ ƒêang ƒëƒÉng k√Ω...' : 'ƒêƒÉng k√Ω'}
                </button>
              </form>

              <div className="switch-auth-mode">
                <p>ƒê√£ c√≥ t√†i kho·∫£n? <a href="#" onClick={(e) => { e.preventDefault(); switchMode('login'); }}>ƒêƒÉng nh·∫≠p</a></p>
              </div>
            </>
          )}

          {/* FORGOT PASSWORD FORM */}
          {mode === 'forgot' && (
            <>
              <div className="login-header">
                <h2>Qu√™n m·∫≠t kh·∫©u</h2>
                <p>Nh·∫≠p email ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u</p>
              </div>

              <form onSubmit={handleForgotPassword}>
                <div className="form-group">
                  <label className="form-label">Email</label>
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="form-input"
                    placeholder="Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω"
                    required
                    disabled={loading}
                  />
                </div>

                <button 
                  type="submit" 
                  className="btn-login"
                  disabled={loading}
                  style={{ opacity: loading ? 0.6 : 1 }}
                >
                  {loading ? '‚è≥ ƒêang x·ª≠ l√Ω...' : 'Kh√¥i ph·ª•c m·∫≠t kh·∫©u'}
                </button>
              </form>

              <div className="switch-auth-mode">
                <p>Nh·ªõ m·∫≠t kh·∫©u? <a href="#" onClick={(e) => { e.preventDefault(); switchMode('login'); }}>ƒêƒÉng nh·∫≠p</a></p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default LoginPage;